# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CategoryCount {
  category: String!
  occurrences: Float!
}

type Collection {
  createdAt: DateTime
  datasets: [Dataset!]!
  description: String!
  id: String!
  name: String!
  user: User!
}

type Dataset {
  categories: [String!]!
  collections: [Collection!]!
  createdAt: DateTime
  datasetColumns: [DatasetColumn!]!
  department: String
  description: String!
  downloads: Float
  id: String!
  isTest: Boolean!
  metadataUpdatedAt: DateTime
  name: String!
  permalink: String
  portal: Portal!
  thematicallySimilarDatasets(portalId: String): [ScoredDataset!]!
  type: String
  updateFrequency: String
  updatedAt: DateTime
  views: Float
}

type DatasetColumn {
  dataset: Dataset!
  description: String!
  field: String!
  id: String!
  joinSuggestionCount(global: Boolean = false): Float!
  joinSuggestions(global: Boolean = false, limit: Int, offset: Int): [JoinSuggestion!]!
  name: String!
  portal: Portal!
  type: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DepartmentCount {
  department: String!
  occurrences: Float!
}

type FieldCount {
  field: String!
  occurrences: Float!
}

type JoinSuggestion {
  column: DatasetColumn!
  potentialOverlap: Float!
}

type Mutation {
  addToCollection(datasetIds: [String!]!, id: String!): Collection!
  createCollection(datasetIds: [String!]!, description: String!, name: String!): Collection!
  deleteCollection(id: String!): Collection!
  removeDatasetFromCollection(collectionId: String!, datasetId: String!): Collection!
}

type PagedCategoryCount {
  items: [CategoryCount!]!
  total: Float!
}

type PagedDatasets {
  datasets: [Dataset!]!
  total: Float!
}

type PagedDepartmentCount {
  items: [DepartmentCount!]!
  total: Float!
}

type PagedFieldCount {
  items: [FieldCount!]!
  total: Float!
}

type Portal {
  abbreviation: String
  adminLevel: String!
  baseURL: String!
  datasetColumns: [DatasetColumn!]!
  datasetCount: Float!
  datasets(limit: Float, offset: Float): [Dataset!]!
  id: String!
  logo: String
  name: String!
  searchDatasets(limit: Float, offset: Float, search: String): PagedDatasets!
  uniqueCategories(isGlobal: Boolean, limit: Float, offset: Float, search: String): PagedCategoryCount!
  uniqueColumnFields(isGlobal: Boolean, limit: Float, offset: Float, search: String): PagedFieldCount!
  uniqueDepartments(isGlobal: Boolean, limit: Float, offset: Float, search: String): PagedDepartmentCount!
}

type Query {
  collection(id: String!): Collection!
  collections: [Collection!]!
  dataset(id: String!): Dataset!
  datasetColumn(id: Int!): DatasetColumn!
  datasetColumns: [DatasetColumn!]!
  datasets(limit: Float, offset: Float): [Dataset!]!
  datasetsByIds(ids: [String!]!): [Dataset!]!
  portal(id: String!): Portal!
  portals: [Portal!]!
  profile: User!
  searchDatasets(categories: [String!], datasetColumns: [String!], departments: [String!], limit: Float, offset: Float, portal: String, search: String): PagedDatasets!
  tag(id: Float!): Tag!
  tags: [Tag!]!
  user(id: String!): User!
}

type ScoredDataset {
  dataset: Dataset!
  score: Float!
}

type Tag {
  datasets: [Dataset!]!
  id: String!
  name: String!
  portal: Portal!
}

type User {
  collections: [Collection!]!
  email: String!
  familyName: String!
  givenName: String!
  id: String!
  identityProvider: String!
}